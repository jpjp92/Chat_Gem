name: Auth-Aware Streamlit Keep Awake

on:
  schedule:
    - cron: "*/30 * * * *"  # 30Î∂ÑÎßàÎã§ (Îçî ÏûêÏ£º)
  workflow_dispatch:

env:
  STREAMLIT_URL: ${{ secrets.STREAMLIT_URL }}
  STREAMLIT_URLS: ${{ secrets.STREAMLIT_URLS }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

jobs:
  auth-aware-ping:
    runs-on: ubuntu-latest
    steps:
      - name: Authentication-Aware Keep-Awake
        run: |
          # URL ÏÑ§Ï†ï
          URLS="$STREAMLIT_URLS"
          if [ -z "$URLS" ]; then
            URLS="$STREAMLIT_URL"
          fi
          if [ -z "$URLS" ]; then
            URLS="https://assistant-gemini25.streamlit.app,https://mbti-multi.streamlit.app,https://ko-chat-bot25.streamlit.app"
            echo "Using default URL list"
          fi

          if [ -z "$URLS" ]; then
            echo "No URLs configured"
            exit 1
          fi

          IFS=',' read -ra ADDR <<< "$URLS"
          SUCCESS_COUNT=0
          TOTAL_COUNT=0

          auth_aware_check() {
            raw="$1"
            URL=$(echo "$raw" | sed -e 's/^\s*//' -e 's/\s*$//')
            URL="${URL%/}"
            echo "\n=== Auth-aware check for: $URL ==="
            TOTAL_COUNT=$((TOTAL_COUNT + 1))

            # 1. Ï¥àÍ∏∞ ÏöîÏ≤≠ÏúºÎ°ú ÏÉÅÌÉú ÌôïÏù∏
            echo "Step 1: Initial status check"
            response=$(curl -s -I --max-time 30 \
              -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
              "$URL" 2>/dev/null || echo "")

            http_code=$(echo "$response" | head -1 | grep -o '[0-9]\{3\}' | head -1)
            location=$(echo "$response" | grep -i "location:" | sed 's/location: //i' | tr -d '\r\n' || echo "")

            echo "Initial HTTP: $http_code"
            echo "Location header: $location"

            # 2. ÏùëÎãµ ÏΩîÎìúÎ≥Ñ Ï≤òÎ¶¨
            success=0
            case "$http_code" in
              200|201|202)
                echo "‚úÖ Direct success (HTTP $http_code) - App is awake!"
                success=1
                ;;
              302|303|307|308)
                if [[ "$location" == *"auth"* ]]; then
                  echo "üîê Authentication redirect detected"
                  echo "   This means the host is responding and app infrastructure is active"
                  echo "   Attempting to ping the auth endpoint to maintain session..."
                  
                  # Ïù∏Ï¶ù ÏóîÎìúÌè¨Ïù∏Ìä∏Ïóê Í∞ÄÎ≤ºÏö¥ ÏöîÏ≤≠
                  auth_ping=$(curl -s -o /dev/null -w "%{http_code}" --max-time 15 \
                    -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
                    "https://share.streamlit.io/ping" 2>/dev/null || echo "000")
                  echo "   Auth endpoint ping: $auth_ping"
                  
                  # ÏõêÎ≥∏ Ïï±Ïóê Ìïú Î≤à Îçî ÏöîÏ≤≠ (Ïù∏Ï¶ù ÏÑ∏ÏÖò ÏÉùÏÑ± ÏãúÎèÑ)
                  echo "   Attempting to establish session..."
                  session_attempt=$(curl -s -L --max-time 20 \
                    -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
                    -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8" \
                    -c /tmp/cookies_$TOTAL_COUNT.txt \
                    "$URL" 2>/dev/null || echo "")
                  
                  # Ïø†ÌÇ§Î•º ÏÇ¨Ïö©Ìïú Ïû¨ÏãúÎèÑ
                  if [ -f "/tmp/cookies_$TOTAL_COUNT.txt" ]; then
                    echo "   Retrying with session cookies..."
                    retry_code=$(curl -s -o /dev/null -w "%{http_code}" --max-time 15 \
                      -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
                      -b /tmp/cookies_$TOTAL_COUNT.txt \
                      "$URL" 2>/dev/null || echo "000")
                    echo "   Retry with cookies: $retry_code"
                    rm -f "/tmp/cookies_$TOTAL_COUNT.txt"
                  fi
                  
                  echo "‚úÖ Host responding (redirect to auth) - Infrastructure active!"
                  success=1
                else
                  echo "üîÑ Standard redirect to: $location"
                  # Î¶¨Îã§Ïù¥Î†âÌä∏ Îî∞ÎùºÍ∞ÄÍ∏∞
                  final_code=$(curl -s -L -o /dev/null -w "%{http_code}" --max-time 30 \
                    -H "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36" \
                    "$URL" 2>/dev/null || echo "000")
                  echo "   Final destination HTTP: $final_code"
                  if [[ "$final_code" =~ ^[23] ]]; then
                    echo "‚úÖ Redirect successful (HTTP $final_code)"
                    success=1
                  fi
                fi
                ;;
              404|500|502|503|504)
                echo "‚ùå Server error (HTTP $http_code) - App may be down"
                ;;
              000|"")
                echo "‚ö†Ô∏è  No response - checking if host is reachable..."
                # ÎèÑÎ©îÏù∏ ÏûêÏ≤¥ ping ÏãúÎèÑ
                domain=$(echo "$URL" | sed 's|https\?://||' | cut -d'/' -f1)
                if curl -s --max-time 10 "https://$domain" > /dev/null 2>&1; then
                  echo "   Host is reachable, app might be starting up"
                  echo "‚úÖ Keep-alive signal sent"
                  success=1
                else
                  echo "‚ùå Host unreachable"
                fi
                ;;
              *)
                echo "‚ö†Ô∏è  Unusual response (HTTP $http_code)"
                echo "‚úÖ But host is responding - considering as success"
                success=1
                ;;
            esac

            # 3. Ï∂îÍ∞Ä keep-alive Ïã†Ìò∏Îì§
            if [ $success -eq 1 ]; then
              echo "Step 2: Sending additional keep-alive signals"
              
              # Îã§ÏñëÌïú ÏóîÎìúÌè¨Ïù∏Ìä∏Ïóê Í∞ÄÎ≤ºÏö¥ ÏöîÏ≤≠Îì§
              curl -s --max-time 10 "$URL/favicon.ico" > /dev/null 2>&1 || true
              sleep 1
              curl -s --max-time 10 "$URL/_stcore/health" > /dev/null 2>&1 || true
              sleep 1
              curl -s --max-time 10 "$URL" \
                -H "User-Agent: KeepAliveBot/1.0" > /dev/null 2>&1 || true
              
              echo "‚úÖ Keep-alive completed for $URL"
              SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
            else
              echo "‚ùå Keep-alive failed for $URL"
            fi
          }

          # Î™®Îì† URL Ï≤òÎ¶¨
          for raw in "${ADDR[@]}"; do
            auth_aware_check "$raw"
            sleep 2  # URL Í∞Ñ Í∞ÑÍ≤©
          done

          # Í≤∞Í≥º Î¶¨Ìè¨Ìä∏
          echo "\nüìä === FINAL REPORT ==="
          echo "‚úÖ Successful: $SUCCESS_COUNT / $TOTAL_COUNT"
          echo "üìà Success Rate: $(( SUCCESS_COUNT * 100 / TOTAL_COUNT ))%"

          if [ $SUCCESS_COUNT -eq $TOTAL_COUNT ]; then
            echo "üéâ All URLs processed successfully!"
            echo "   Apps should remain active longer due to keep-alive signals"
          elif [ $SUCCESS_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è  Partial success - some apps may need attention"
            echo "   But keep-alive signals were sent to responsive apps"
          else
            echo "‚ùå All URLs failed - may need manual investigation"
            if [ -n "$SLACK_WEBHOOK" ]; then
              timestamp=$(date '+%Y-%m-%d %H:%M:%S UTC')
              text="üö® *Streamlit Keep-Awake Alert*\n\n*Time:* $timestamp\n*Status:* All apps failed to respond\n*URLs:* $(echo "${ADDR[*]}" | tr ' ' '\n')\n\nAll apps may be down or require manual attention."
              payload="{\"text\":\"$text\"}"
              curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK" || true
            fi
            exit 1
          fi

          # Î∂ÄÎ∂Ñ ÏÑ±Í≥µÏù∏ Í≤ΩÏö∞ÏóêÎèÑ Slack ÏïåÎ¶º (ÏÑ†ÌÉùÏ†Å)
          if [ $SUCCESS_COUNT -ne $TOTAL_COUNT ] && [ -n "$SLACK_WEBHOOK" ]; then
            timestamp=$(date '+%Y-%m-%d %H:%M:%S UTC')
            failed_count=$((TOTAL_COUNT - SUCCESS_COUNT))
            text="‚ö†Ô∏è *Streamlit Keep-Awake Partial Success*\n\n*Time:* $timestamp\n*Success:* $SUCCESS_COUNT / $TOTAL_COUNT apps\n*Failed:* $failed_count apps\n\nSome apps may need attention."
            payload="{\"text\":\"$text\"}"
            curl -s -X POST -H 'Content-type: application/json' --data "$payload" "$SLACK_WEBHOOK" || true
          fi